name: ci

on: [push, release]

jobs:
  docker-build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get the version
        id: get_version
        run: |
          v="${GITHUB_REF##*/}"
          if [[ "$v" == "master" ]]; then
            echo ::set-output name=VERSION::latest
          else
            echo ::set-output name=VERSION::${v}
          fi

      - name: Docker Build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: DockerfileBuilder
          tags: builder:ED0C6428

      - name: Copy from builder and push
        id: docker_push
        uses: docker/build-push-action@v2
        with:
          push: true
          file: Dockerfile
          tags: sebuild/v2ray:${{ steps.get_version.outputs.VERSION }}

      - name: docker Builder Digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: docker push Digest
        run: echo ${{ steps.docker_push.outputs.digest }}

      - name: Move artifact to host
        # FIXME: just for test remove comment afterwards
        # if: startsWith(github.ref, 'refs/tags')
        run: |
          mkdir v2ray
          docker create --name v2ray-container builder:ED0C6428 sh
          docker cp v2ray-container:/v2ray ./v2ray
          docker rm -f v2ray-container

      - name: Pack up artifact
        if: startsWith(github.ref, 'refs/tags')
        run: tar -czvf v2ray.tar.gz ./v2ray

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: v2ray.tar.gz
          asset_name: v2ray.tar.gz
          asset_content_type: application/gzip
